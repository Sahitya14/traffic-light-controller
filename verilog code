`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12/16/2024 10:29:42 PM
// Design Name: 
// Module Name: traffic_light
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module traffic_light(
    input clk,
    input rst,
    output reg [2:0] light_M1,
    output reg [2:0] light_S,
    output reg [2:0] light_MT,
    output reg [2:0] light_M2,
    output reg [3:0] count,      // Exposed count for debugging
    output reg [2:0] ps          // Exposed ps (present state)
);

    parameter S1 = 0, S2 = 1, S3 = 2, S4 = 3, S5 = 4, S6 = 5;
    parameter sec7 = 7, sec5 = 5, sec2 = 2, sec3 = 3;

    reg [3:0] next_count;
    reg [2:0] next_ps;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            ps <= S1;
            count <= 0;
        end else begin
            ps <= next_ps;
            count <= next_count;
        end
    end

    always @(*) begin
        // Default values
        next_ps = ps;
        next_count = count + 1;

        case (ps)
            S1: if (count < sec7) next_ps = S1;
                else begin
                    next_ps = S2;
                    next_count = 0;
                end
            S2: if (count < sec2) next_ps = S2;
                else begin
                    next_ps = S3;
                    next_count = 0;
                end
            S3: if (count < sec5) next_ps = S3;
                else begin
                    next_ps = S4;
                    next_count = 0;
                end
            S4: if (count < sec2) next_ps = S4;
                else begin
                    next_ps = S5;
                    next_count = 0;
                end
            S5: if (count < sec3) next_ps = S5;
                else begin
                    next_ps = S6;
                    next_count = 0;
                end
            S6: if (count < sec2) next_ps = S6;
                else begin
                    next_ps = S1;
                    next_count = 0;
                end
            default: next_ps = S1;
        endcase
    end

    always @(*) begin
        case (ps)
            S1: begin
                light_M1 = 3'b001;
                light_M2 = 3'b001;
                light_MT = 3'b100;
                light_S  = 3'b100;
            end
            S2: begin
                light_M1 = 3'b001;
                light_M2 = 3'b010;
                light_MT = 3'b100;
                light_S  = 3'b100;
            end
            S3: begin
                light_M1 = 3'b001;
                light_M2 = 3'b100;
                light_MT = 3'b001;
                light_S  = 3'b100;
            end
            S4: begin
                light_M1 = 3'b010;
                light_M2 = 3'b100;
                light_MT = 3'b010;
                light_S  = 3'b100;
            end
            S5: begin
                light_M1 = 3'b100;
                light_M2 = 3'b100;
                light_MT = 3'b100;
                light_S  = 3'b001;
            end
            S6: begin
                light_M1 = 3'b100;
                light_M2 = 3'b100;
                light_MT = 3'b100;
                light_S  = 3'b010;
            end
            default: begin
                light_M1 = 3'b000;
                light_M2 = 3'b000;
                light_MT = 3'b000;
                light_S  = 3'b000;
            end
        endcase
    end
endmodule
